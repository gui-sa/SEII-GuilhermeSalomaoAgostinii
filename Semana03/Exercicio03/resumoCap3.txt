Name: Guilherme Salom√£o Agostini
ID: 11721EMT003

# Introduction:
    Each running shelll is a process and when you run some other aplication on it, the shell opens his process as his child process and starts the other aplication process just coming back when the aplication stops.
    Process manipulation are declared on <unistd.h>
    Every process has an ID (PID) that are 16 bit numbers, a parent process (except the zombie ones)
    It is possible to acquire process ID using getpid() (with pid_t typedef) and its parent ID using getppid()

# ex1.c generating ex1
    As it is possible to see, maintaining the same terminal, the parent ID will always be the same, depite the fact that every time the ex1 runs, the new process has a diferent value.

# Shell command ps -e -o pid,ppid,command
    Shows all process running in your machine and prints it pid, ppid (parent id) and command
    
# Shell command kill <pid>
    Terminates a process by force.

# ex2.c generating ex2
    It retuns the command ls -l in root path (/) called by Shell.
    However, using shell command it can run literally any process.
    Because it runned in the Shell its process works just as if you had ran it there.

# Using Fork
    Function fork creates a child process that are exact copy of the parent process. They difer in ID, memory space

# ex3.c generating ex3
    Whe using FORK it returns 0 for the created child and return the child PID for the parent process... That caracteristic enables thata the codes used become diferent and do diferents actions.

# Using exec
    Function exec replace the running programm with another program. It will only return something if an error occurs.
    Arguments are passed using argc and argv in Shell
        argv[0] = name of the program
        
# Using both exec and fork
    A common pattern: first you run a fork and separes parent form child using the returned number, and then, in the child process uses a exec funtion to swap program.
    The arguments passed must finish with NULL and must begin with its name.

# ex4.c generating ex4
    Creates a fork, the parent fork awaits the child process to finish. The child process executes another aplication. If something goes wrong, it returns to the code and print the error message.

# Process Scheduling
    Linux treats parents and child process as diferents things. There is no guarantee which one will run first.
    It is possible to change a process priority by nice() function... But you shouldn't do that instead of really necessity.
    You can also rechange a process by renice()
    You can only use nice mode with sudo.

# Signals
    Signal is a message sent to the process from the linux (that are assincronous) meaning something important. The process interrupts it and responds to signal. It can just ignore, or answer to it, or call another process to deal with it.
    There are special types var to handle signals  (as interuptions can corrupt it): sig_atomic_t.

# ex5.c gerating ex5
    Signals are event generated by Linux system. In this aplication we use a user defined signal instead a stardard one.
    They can be used for inter process communication!

# Process Termination
    1) The program exits naturally by return
    2) The program is forced to exit by exit() command
    3) Exist abnormally due signals (SIGBUS, SIGSEGV, SIGFPE)
        SIGINT : user press Crtl+c
        SIGTERM : sent by skill command
        SIGABRT: when it is aborted
        All signals can be sent using kill SHELL command
            kill(child_pid, SIGTERM)

# wait system call
    Used to make parent process wait its child processes.
        WIFEXITED determines from a child exit status if exited normally
        WTERMSIG to extract its exit status number by which it died.

# ex6.c gerating ex6
    The code created a fork and runned a ls -l / in the child using exec function. The parent process waits the child to finish, tho, and prints a message based in the status of the child.

# Zombie Process:
    It is a process that has terminated but has not been cleaned up yet: probably because the parent process has been terminated before the child process (it is parent responsability to clean up its children processes)


# ex7.c generating ex7  
    It creates a fork in which the children process awaits 60 ms and the parent process is forced to terminate... 
    That action creates a zombie process due the parent terminates before the child process. This way the children process is never cleaned naturally.
    However, when I terminates the Shell parent process, it finishes the zombie too.

# Dealing with zombies (cleaning up children assincronously)    
    If the parent process finishes before its children process it will let them consuming resources as zombies..
        You can use wait... But it will block parent running process...
        To avoid blocking the parent process, you can simply notify the parent process when the children finishes using interprocess communication (Signals)
            SIGCHLD cleans assincronously its child process.

# ex8.c generating ex8
    Signal typedef stores its child exit status and the parent program can access.
    
        